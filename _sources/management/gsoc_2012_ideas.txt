
Brainstorm
----------

Coding Topics
^^^^^^^^^^^^^
  * Code optimization (speed up the Sympy.physics.mechanics calculations for
    bigger problems). Also, .subs(), .diff() [SymPy]
  * Excessive code output (lots of languages, including visualization?, working
    nicely with SAGE?) This may include exploring the AutoZ functionality in
    Autolev and what, if anything, it may do for faster code [SymPy/Sage]
  * Refactor Kane.linearize procedure identically to presentation in upcoming
    multi-body system dynamics paper by Peterson, Gede, Hubbard. [SymPy]
  * Before adding new functionality, do some cleanup and consistency checks on
    existing functionality/API/documentation. This will give a more solid
    foundation for future expanded functionality. An example of what needs to
    be cleaned up is 0/Zero and Vector interaction. [SymPy]
  * Euler, Lagrange and other methods in sympy.physics.mechanics [SymPy]
  * Add all the helper functions from Autolev (momentum, energy, etc) [SymPy]
  * Support for flexible body systems [SymPy]

Documentation/Accessibility Topics
----------------------------------
  * pydy.org website work.  Plan out what sorts of things we want on the
    website, how to present them. Need to invest time to understand mediawiki
    and how to properly set up users, email, etc. [Sage/SymPy]
  * Learning dynamics with python book (similar idea at Online Dyanmics). This
    could be PyDy.org or at least a part of it. Make use of IPython Notebooks!
    Imagine clicking a tutorial page and it opens as an ipython notebook in the
    browser where you can interact with all of the code, seeing plots change,
    equations change etc. [Sage/SymPy]
  * Sage integration. How does SymPy work in Sage? Can it be utilized? Would
    this be the appropriate framework for “Dynamics done with python”? It
    already has most of the pieces. It uses Python as the glue and has a web
    interface. Sage is also a mentor org in GSoC. [Sage]

Flights-of-Fancy Topics
^^^^^^^^^^^^^^^^^^^^^^^
  * Draw the system and analytical equations are generated automatically. This
    would be like Working Model. You draw a system. Set constraints. Apply
    forces. And then it computes the equations of motion. Then simulate, plot,
    etc. [Blender/Processing/OGRE]
  * Can simulation/integration be in SymPy (i.e. without dependencies on Scipy
    or other ode solvers)? i.e. write some ode solvers in sympy so the
    integration, simulation and plotting can all be in sympy. It would be nice
    to do equation derivation, simulation and plotting all in SymPy without any
    dependencies. (or the code output would have a solver, just like Autolev’s
    c output). [SymPy]
  * Sympy is overhauling the plotting module: what if we could do most needed
    plotting of systems in Sympy (no matplotlib needed). [SymPy]
  * GUI Template for dynamic systems visualization/exploration -- maybe
    something with sliders for parameters/initial conditions autogenerated from
    a “DynamicSystem” object, maybe some sort of basic plots... maybe be
    difficult to generalize, but would be pretty sweet. [General]
  * Blender and Processing both have orgs: can we connect to an animation
    module in either of these. Blender/Processing folks excel a the visual part
    of visualization and we excel at the ization part...meaning simulation. It
    would be nice to improve their physics stuff and in the meantime get an
    easy connection to visualizing dynamic systems. For example, MBDYN has a
    Blender plugin (written in python), which allows you to draw objects and
    connect them with constraints, apply forces, etc, then run the MBDYN code
    and simulate/animate the object in the Blender window.
    [Blender/Processing/OGRE]

Suggested Ideas During meeting
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  * Better equation simplification [SymPy]
  * Printing out equations nicely [SymPy]
  * Code-output/specified vairables [SymPy]
  * Too many environments to work in [Sage]

Funding Sources
---------------
Groups to seek funding from (mentoring orgs):

  * SymPy - sympy.physics.mechanics is the core for computing analytic
    equations of motion. Check out the application process and past
    applications on `<https://github.com/sympy/sympy/wiki>`_
  * SAGE - SAGE glues together tons of scientific computing packages with
    Python. I already has SymPy, SciPy/NumPy, matplotlib, etc. Plus it has some
    3D visualization pacakges. We could develop code which does the whole
    dynamics workflow in SAGE.
  * Blender - Blender is a CAD package mainly used by artists for movies,
    videogames etc. It has a python scripting language to connect into it. PyDy
    could be connected via a plugin to allow one to build models graphically or
    simply visualize. Check out Robert Baldwin’s work to connect MBDyn and
    Blender: `<http://www.baldwintechnology.com/blender.html>`_
  * SciLab - Scilab may be interested in having symbolics, dynamics, and/or
    simulink like stuff.
  * Processing - Processing is a visualization toolkit that could connect to or
    be utilized by PyDy in the same way as Blender.
  * R - R has integration, simulation and plotting capabilities. It is
    primarily a statistical computing environment.
  * Portland State University - might be a general place to apply, Luke was
    funded by this one.
  * Oregon State University - might be a general place to apply
  * OGRE - Something about visualization

Non GSoC funding
^^^^^^^^^^^^^^^^
  * UC Davis MAE department
  * NumFocus: A new non-profit that is going to fund scientific python
    projects.

Proposal Ideas
--------------

I wrote the possible application orgs, but the Universities might take any
these too.

sympy.physics.mechanics improvement #1 [SymPy]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  * Speed up mechanics code (may involve speeding up SymPy core).
  * Write output code module.
  * Add more dynamics functionality (helper functions).
  * More documentation and a large set of examples

sympy.physics.mechanics improvement #2 [SymPy]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  * Add in other EoM methods (Newton-Euler, Lagrange, etc)
  * Add more dynamics functionality (helper functions, other methods for
    kinematics)
  * Refactor the Kane linearize.
  * Clean up API.
  * Documentation and examples.

sympy.physics.mechanics improvement #3 [SymPy]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * Figure out how to do symbolic EoMs, simulation, and plotting all within
    SymPy. This would allow you do this workflow all within SymPy without other
    dependencies.
  * Documentation and examples.

sympy.physics.mechanics improvement #4 [SymPy]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * Add support and documentation for flexible multi-body systems.

PyDy in Sage [Sage]
^^^^^^^^^^^^^^^^^^^

  * Create an environment in Sage to do dynamics problems from start to finish
    (EoM, simulation, plotting, animation)
  * This may involve developing a module that glues together all the disparate
    modules in Sage so that Dynamics can easily be done with few commands. It
    may also involve introducing some other packages to Sage like (PyDsTool or
    OpenOpt, python-control, if they are not there already).
  * This could include a GUI environment.
  * Develop extension documentation on the PyDy.org website (and/or Sage) with
    tutorials, examples and such. This could have an educational focus and be
    used to teach dynamics in undergraduate and graduate courses.

Visualization [Blender or Processing, maybe SymPy or Sage]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * Write output code generators in sympy.physics.mechanics for animation.
  * Write a plugin for the 3D visualization tool that runs the output code and
    animates the system. You could interactively change parameters and initial
    conditions for different animations.
  * This could be done just for 2D problems with matplotlib’s animations, or 3D
    with MayaAvi both of which are in Sage.
  * This could include a GUI environment.

Draw objects [Blender or Processing]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * Create a plugin for the graphic software that generates and runs
    SymPy.physics.mechanics code from drawn objects. (i.e. draw the objects in
    a CAD environment, connect them with constraints, apply forces, and it
    automatically generates EoMs)
  * This would involve writing code output modules that send out simulation and
    animation code for sympy.physics.mechanics.
  * Workflow would be: draw objects -> specify motion constraints and forces ->
    generate EoMs -> Integrate EoMs -> play animation (all within the graphical
    CAD software)
